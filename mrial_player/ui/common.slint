import { VerticalBox } from "std-widgets.slint";

export global Theme {
    out property <color> border_color: rgb(29, 29, 29);
    out property <color> secondary-border-color: rgb(45, 45, 45);

    out property <color> drop_shadow_color: rgb(11,11,11);
    
    out property <color> red_color: rgb(255, 106, 74);
    out property <color> green_color: rgb(6, 255, 183);
   
    out property <color> bg_primary_brush_start: #3457D5;
    out property <color> bg_primary_brush_end: #318CE7;

    out property <color> text_primary_color: rgb(255, 255, 255);
    out property <color> text_secondary_color: rgb(89, 89, 89);

    out property <color> bg_primary_color: rgb(20, 20, 20);
    out property <color> bg_secondary_color: rgb(29, 29, 29);

    out property <brush> bg_primary_brush: @linear-gradient(45deg, self.bg_primary_brush_start, self.bg_primary_brush_end); 
    out property <brush> bg_negative_brush: @linear-gradient(90deg, self.bg_primary_brush_start, self.bg_primary_brush_end); // @linear-gradient(90deg, #FF9A8B 0%, #FF6A88 55%, #FF99AC 100%);
    out property <brush> bg_positive_brush: @linear-gradient(90deg, self.bg_primary_brush_start, self.bg_primary_brush_end); // @linear-gradient( 99deg,  rgba(255,166,0,1) 14.7%, rgba(255,99,97,1) 73%, rgba(255,99,97,1) 100%);

    out property <length> text_size_large: 20px;
    out property <length> text_size_medium: 14px;
}

export component MrialHeader inherits Text {
    color: Theme.text-primary-color;
    font-size: Theme.text-size-large;
    font-weight: 600;
}

export component MrialSubHeader inherits Text {
    color: Theme.text-secondary-color;
    font-size: Theme.text_size_medium;
} 

export global GlobalVars {
    in-out property <string> app_name: "Mrial";
    in-out property <string> app_version;
}

export component Screen inherits Rectangle {
    callback back;
    callback set_current_subpage(int);

    background: rgb(20, 20, 20);
}

export struct MrialDropdownItem {
    label: string,
    value: string
}

export component MrialDropdown inherits Rectangle{
    in property <string> label;
    in property <[MrialDropdownItem]> items;
    in-out property <int> current-index;
    in-out property <bool> open: false;

    callback clicked();
    callback selected();

    height: 35px;
    width: 180px;

    drop-shadow-color: Theme.drop_shadow_color;
    drop-shadow-blur: 15px;

    border-color: touch_area.has-hover || open ? Theme.secondary-border-color : Theme.border-color;
    animate border-color { duration: 150ms; }

    border-width: 1px;
    border-radius: 5px;
    background: Theme.bg-primary-color;

    touch_area := TouchArea {
        mouse-cursor: MouseCursor.pointer;

        clicked => { root.clicked(); }
    }

    header := HorizontalLayout {
        padding: 10px;
        alignment: LayoutAlignment.space-between;
        VerticalLayout {
            alignment: LayoutAlignment.center;
            Text {
                text: label;
                font-size: 12px;
                color: Theme.text-secondary-color;
            }
        }
        VerticalLayout {
            alignment: LayoutAlignment.center;
            Text {
                text: items[current-index].label;
                font-size: 12px;
                color: Theme.text-secondary-color;
            }
        }
    }

    Rectangle {
        y: 0;
        x: header.width + 5px;
        width: root.width;
        height: (item_container.spacing + 30px) * items.length;
        visible: open;
        border-color: Theme.secondary-border-color;
        border-width: 1px;
        border-radius: 5px;
        background: Theme.bg-primary-color;
        opacity: open ? 1.0 : 0.0;
        animate opacity { duration: 100ms; }

        item_container := VerticalLayout {
            padding-left: 10px;
            padding-right: 10px;
            alignment: LayoutAlignment.center;
            width: root.width;
            spacing: 5px;

            for item[i] in items: TouchArea {
                // TODO: Fix mouse cursor dectection
                // mouse-cursor: MouseCursor.pointer;
                width: 100%;
                height: 30px;   

                clicked => {
                    root.current-index = i; 
                    root.selected();
                }

                VerticalLayout {
                    alignment: LayoutAlignment.center;

                    HorizontalLayout {
                        alignment: LayoutAlignment.space-between;
                        Text {
                            text: item.label;
                            font-size: 12px;
                            color: Theme.text-secondary-color;
                        }
                        VerticalLayout {
                            alignment: LayoutAlignment.center;
    
                            if i == root.current-index: Image {
                                source: @image-url("../assets/icons/check.svg");
                                width: 14px;
                                height: 14px;
                                colorize: Theme.bg_primary_brush_end;
                            }  
                        }
                    }
                }
            }
        }
    }
}


export enum ButtonType {
    basic,
    gradient,
    negative,
    positive
}

export component MrialButton inherits Rectangle {
    in property <string> label;
    in property <ButtonType> type: ButtonType.gradient;
   
    in property <image> icon;
    in property <bool> has_icon: false;

    callback clicked();

    width: 100%;
    height: 35px;
    border-radius: 5px;

    init => {
        if (type == ButtonType.gradient) {
            self.background = Theme.bg-primary-brush;
        } else if (type == ButtonType.negative) {
            self.border-width = 2px; 
            self.background = Theme.bg_negative_brush;
        } else if (type == ButtonType.positive) {
            self.background = Theme.bg-positive-brush;
        } else if (type == ButtonType.basic) {
            self.background = Theme.bg-primary-color;
        }
    }

    opacity: touch-area.has-hover ? 0.8 : 1.0;
    animate opacity { duration: 250ms; }

    touch_area := TouchArea {
        mouse-cursor: MouseCursor.pointer;
        clicked => { clicked(); }
    }

    HorizontalLayout {
        alignment: LayoutAlignment.center;
        spacing: 5px;

        if has-icon: VerticalLayout {
            alignment: LayoutAlignment.center;
            Image {
                source: icon;
                width: 20px;
                height: 20px;
                colorize: Theme.text-primary-color;
            }
        }

        Text {
            text: label;
            font-size: 12px;
            font-weight: 500;
            color: white;
            horizontal-alignment: TextHorizontalAlignment.center;
            vertical-alignment: TextVerticalAlignment.center;
        }
    }
}

export component MrialTextInput inherits Rectangle {
    in-out property <InputType> input-type <=> text_input.input-type;
    in-out property <string> value <=> text_input.text;

    background: Theme.bg-primary-color;
    border-color: Theme.border_color;
    border-width: 2px;
    border-radius: 7.5px;

    text_input := TextInput {
        x: 10px;
        vertical-alignment: TextVerticalAlignment.center;
        input-type: InputType.text;
        height: parent.height;
        single-line: true;
        color: Theme.text-secondary-color;
    }
}
