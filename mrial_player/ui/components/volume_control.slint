import { Theme, MrialSlider } from "../common.slint";
import { ServerFunctions } from "server.slint";

export component MrialVolumeControl inherits Rectangle {
    in-out property <bool> muted: false;
    in-out property <int> volume: 100;

    callback mute();
    callback volume_changed(int);

    border-radius: 5px;
    height: 35px;
    background: Theme.bg-primary-color;
    border-width: 1px;
    border-color:  volume_button.has-hover ? Theme.secondary-border-color : Theme.border-color;

    drop-shadow-color: Theme.drop_shadow_color;
    drop-shadow-blur: 15px;
    clip: true;

    animate border-color { duration: 150ms; }

    HorizontalLayout {
        Rectangle {
            width: root.height;
            height: root.height;

            volume_button := TouchArea {
                width: parent.width;
                height: parent.height;
                mouse-cursor: MouseCursor.pointer;

                clicked => {
                    muted = !muted;
                    mute();

                    if (muted) {
                        slider.slider_color = Theme.secondary-border-color;
                    } else {
                        slider.slider_color = Theme.bg_primary_brush;
                    }
                }
            }
        
            Image {
                source: muted ? 
                    @image-url("../../assets/icons/muted.svg") :
                    @image-url("../../assets/icons/volume.svg");
                width: 20px;
                height: 20px;
                colorize: Theme.text_secondary_color;
                animate colorize { duration: 150ms; }
            }
        }
        Rectangle {
            width: 1px; 
            height: root.height; 
            background: volume_button.has-hover ? Theme.secondary-border-color : Theme.border-color;
            animate background { duration: 150ms; }
        }
        Rectangle { 
            height: root.height;
            width: 125px; // TODO: make this dynamic, adjust with size of control panel

            slider := MrialSlider {
                value: volume;
                x: 10px;
                min_value: 0;
                max_value: 100;
                changed(value) => { volume_changed(value); }
            }
        }
    }
}
