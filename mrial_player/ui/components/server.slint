import { Button , VerticalBox , GridBox } from "std-widgets.slint";
import { Theme , MrialButton, ButtonType } from "../common.slint";

component SpecBox inherits Rectangle{
    in property <length> container_width;
    in property <string> spec;
    in property <string> spec_label;

    width: container_width / 2 - 12.5px;
    height: 50px;
    border-radius: 5px;
    background: Theme.bg-secondary-color;
    VerticalLayout {
        alignment: LayoutAlignment.center;
        Text {
            text: spec;
            color: Theme.text-primary-color;
            font-size: 20px;
            font-weight: 600;
            horizontal-alignment: TextHorizontalAlignment.center;
        }
        Text {
            text: spec-label;
            color: Theme.text-secondary-color;
            font-size: 12px;
            font-weight: 600;
            horizontal-alignment: TextHorizontalAlignment.center;
        }
    }
}

export struct IServer {
    shareable: bool,
    vcpu: int,
    storage: int,
    ram: int,
    os: string,
    name: string
}

export component Server inherits TouchArea {
    callback cb();
    
    in property <IServer> server;
    in property <length> container_width: 175px;

    width: container-width;
    height: 225px;

    clicked => { cb(); }
    mouse-cursor: MouseCursor.pointer;

    Rectangle { 
        width: parent.width;
        height: parent.height;
        border-width: 2px;
        border-radius: 10px;
        border-color: parent.has-hover ? Theme.secondary-border-color : Theme.border-color;   
        animate border-color { duration: 0.25s; }

        VerticalLayout {
            width: parent.width;
            padding: 10px;
            alignment: LayoutAlignment.center;
            spacing: 10px;
    
            GridLayout {
                spacing: 5px;
                Row {
                    Rectangle {
                        width: container_width / 2 - 12.5px;
                        height: 50px;
                        border-radius: 5px;
                        background: Theme.bg-secondary-color;
                        Rectangle {
                            width: 45px;
                            height: 45px;
                            border-radius: 5px;
                            clip: true;
                            
                            Image {
                                init => {
                                    if (server.os == "ubuntu") {
                                        self.source =  @image-url("../../assets/os/ubuntu.png");
                                    } else if (server.os == "macos") {
                                        self.source =  @image-url("../../assets/os/macos.png");
                                    }
                                }
                                image-fit: ImageFit.contain;
                                width: parent.width;
                                height: parent.height;
                            }
                        }
                    }
                    SpecBox {
                        container_width: container_width;
                        spec: server.vcpu;
                        spec_label: "vCPU";
                    }
                }
                Row {
                    SpecBox {
                        container_width: container_width;
                        spec: server.storage;
                        spec_label: "GB Storage";
                    }
                    SpecBox {
                        container_width: container_width;
                        spec: server.ram;
                        spec_label: "GB RAM";
                    }
                }
            }
    
            VerticalLayout {
                spacing: 5px;
                Text {
                    text: server.name;
                    font-size: 16px;
                    font-weight: 600;
                }
                Text {
                    text: "Decentralized";
                    font-size: 12px;
                    color: Theme.text-secondary-color;
                }
            }
    
            MrialButton {
                width: container-width - 10px * 2;
                label: server.shareable ? "Share" : "Connect";
                type: server.shareable ? ButtonType.positive : ButtonType.gradient;
                clicked => { cb(); }
            }
        }
    } 
}