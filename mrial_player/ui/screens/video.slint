import { Screen, Theme } from "../common.slint";
import { VerticalBox, Button } from "std-widgets.slint";
import { MrialButton, ButtonType } from "../common.slint";
import { ServerFunctions } from "../components/server.slint";
import { ControlPanel } from "../components/control_panel.slint";

export global VideoFunctions {
    pure callback mouse_move(/* x */ length, /* y */ length, /* pressed */ bool);
    pure callback click(/* x */ length, /* y */ length, /* button */ PointerEventButton);
    pure callback modifiers_pressed(/* control */ bool, /* shift */ bool, /* alt */ bool, /* meta */ bool);
    pure callback key_pressed(KeyEvent);
    pure callback key_released(KeyEvent);
    pure callback scroll(/* x */ length, /* y */ length);
}

export component VideoScreen inherits Screen {
    in property <image> video-frame <=> image.source;
    in-out property <bool> cp_button_attached: false;

    background: black;

    image_container := VerticalBox {
        padding: 0;
        image := Image {
            image-rendering: ImageRendering.pixelated;
            padding: 0;
            touch := TouchArea {
                clicked => {
                    if (touch.mouse-x > control_panel_button.x && 
                        touch.mouse-x < control_panel_button.x + control_panel_button.width && 
                        touch.mouse-y > control_panel_button.y && 
                        touch.mouse-y < control_panel_button.y + control_panel_button.height 
                    ) {
                        if (control-panel.visible) {
                            control_panel.visible = false; 
                        } else { // if (cp_button_attached == false) {
                            control_panel.visible = true; 
                        }
                    } 
                }
                scroll-event(event) => {
                    VideoFunctions.scroll(event.delta-x, event.delta-y);
                    accept
                }
                pointer-event(event) => {
                    if (touch.mouse-x >= control_panel_button.x && 
                        touch.mouse-x <= control_panel_button.x + control_panel_button.width && 
                        touch.mouse-y >= control_panel_button.y && 
                        touch.mouse-y <= control_panel_button.y + control_panel_button.height
                    ) {
                        if (event.kind == PointerEventKind.up) {
                            cp_button_attached = false; 
                        }
                    } else if (event.kind == PointerEventKind.up) {
                        
                        VideoFunctions.click(touch.mouse-x, touch.mouse-y, event.button);
                    } else if (event.kind == PointerEventKind.move) {
                        VideoFunctions.mouse_move(touch.mouse-x, touch.mouse-y, false);
                    }
                }
                moved => {
                    if (touch.mouse-x >= control_panel_button.x && 
                        touch.mouse-x <= control_panel_button.x + control_panel_button.width && 
                        touch.mouse-y >= control_panel_button.y && 
                        touch.mouse-y <= control_panel_button.y + control_panel_button.height && self.pressed) {
                            cp-button-attached = true;
                    }

                    if (cp-button-attached) {
                        control_panel_button.x = touch.mouse-x - control_panel_button.width / 2;
                        control_panel_button.y = touch.mouse-y - control_panel_button.height / 2;
                        return;
                    }

                    VideoFunctions.mouse_move(touch.mouse-x, touch.mouse-y, self.pressed);
                }
            }
            control_panel := ControlPanel {
                x: control_panel_button.x + control_panel_button.width + 10px;
                y: control-panel-button.y;

                disconnect => {
                    root.set_current_subpage(1);
                }
            }

            control_panel_button := Rectangle {
                x: 0px; 
                y: 0px; 
                width: 35px;
                height: 35px;
                border-radius: 7.5px;
                border-width: 1px;
                border-color: Theme.bg-secondary-color;
                background: Theme.bg-primary-color;
            }
        }
    }
}